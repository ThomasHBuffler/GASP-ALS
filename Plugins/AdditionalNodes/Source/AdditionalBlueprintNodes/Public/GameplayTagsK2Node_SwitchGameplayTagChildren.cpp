// Copyright Epic Games, Inc. All Rights Reserved.

#include "GameplayTagsK2Node_SwitchGameplayTagChildren.h"
#include "EdGraph/EdGraph.h"
#include "EdGraphSchema_K2.h"
#include "Engine/Blueprint.h"
#include "BlueprintNodeSpawner.h"
#include "BlueprintActionDatabaseRegistrar.h"
#include "BlueprintGameplayTagLibrary.h"
#include "GameplayTagsManager.h"

#include UE_INLINE_GENERATED_CPP_BY_NAME(GameplayTagsK2Node_SwitchGameplayTagChildren)

UGameplayTagsK2Node_SwitchGameplayTagChildren::UGameplayTagsK2Node_SwitchGameplayTagChildren(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
{
	FunctionName = TEXT("NotEqual_TagTag");
	FunctionClass = UBlueprintGameplayTagLibrary::StaticClass();
	OrphanedPinSaveMode = ESaveOrphanPinMode::SaveNone;

	// Initialize new booleans
	bDirectChildrenOnly = true;
	bCallParentNode = false;
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::CreateFunctionPin()
{
	UEdGraphPin* FunctionPin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Object, FunctionClass, FunctionName);
	FunctionPin->bDefaultValueIsReadOnly = true;
	FunctionPin->bNotConnectable = true;
	FunctionPin->bHidden = true;

	UFunction* Function = FindUField<UFunction>(FunctionClass, FunctionName);
	if (Function && Function->HasAllFunctionFlags(FUNC_Static))
	{
		if (UBlueprint* BP = GetBlueprint())
		{
			UClass* FunctionOwnerClass = Function->GetOuterUClass();
			if (!BP->SkeletonGeneratedClass->IsChildOf(FunctionOwnerClass))
			{
				FunctionPin->DefaultObject = FunctionOwnerClass->GetDefaultObject();
			}
		}
	}
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::PostLoad()
{
	Super::PostLoad();
	if (UEdGraphPin* FunctionPin = FindPin(FunctionName))
	{
		FunctionPin->DefaultObject = FunctionClass->GetDefaultObject();
	}
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)
{
	bool bIsDirty = false;
	const FName PropertyName = (PropertyChangedEvent.Property ? PropertyChangedEvent.Property->GetFName() : NAME_None);
	if (PropertyName == GET_MEMBER_NAME_CHECKED(UGameplayTagsK2Node_SwitchGameplayTagChildren, PinTags) ||
		PropertyName == GET_MEMBER_NAME_CHECKED(UGameplayTagsK2Node_SwitchGameplayTagChildren, bDirectChildrenOnly) ||
		PropertyName == GET_MEMBER_NAME_CHECKED(UGameplayTagsK2Node_SwitchGameplayTagChildren, bCallParentNode))
	{
		bIsDirty = true;
	}

	if (bIsDirty)
	{
		ReconstructNode();
	}
	Super::PostEditChangeProperty(PropertyChangedEvent);
	GetGraph()->NotifyNodeChanged(this);
}

FText UGameplayTagsK2Node_SwitchGameplayTagChildren::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	return NSLOCTEXT("K2Node", "Switch_Tag", "Switch on Gameplay Tag Children");
}

FText UGameplayTagsK2Node_SwitchGameplayTagChildren::GetTooltipText() const
{
	return NSLOCTEXT("K2Node", "SwitchTag_ToolTip", "Selects an output that matches the input value or its children.");
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
	UClass* ActionKey = GetClass();
	if (ActionRegistrar.IsOpenForRegistration(ActionKey))
	{
		UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
		check(NodeSpawner != nullptr);

		ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
	}
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::CreateSelectionPin()
{
	const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();
	UEdGraphPin* Pin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Struct, FGameplayTag::StaticStruct(), TEXT("Selection"));
	K2Schema->SetPinAutogeneratedDefaultValueBasedOnType(Pin);
}

FEdGraphPinType UGameplayTagsK2Node_SwitchGameplayTagChildren::GetPinType() const
{
	FEdGraphPinType PinType;
	PinType.PinCategory = UEdGraphSchema_K2::PC_Struct;
	PinType.PinSubCategoryObject = FGameplayTag::StaticStruct();
	return PinType;
}

FEdGraphPinType UGameplayTagsK2Node_SwitchGameplayTagChildren::GetInnerCaseType() const
{
	FEdGraphPinType PinType;
	PinType.PinCategory = UEdGraphSchema_K2::PC_String;
	return PinType;
}

FName UGameplayTagsK2Node_SwitchGameplayTagChildren::GetPinNameGivenIndex(int32 Index) const
{
	check(Index);
	return PinNames[Index];
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::CreateCasePins()
{
	UGameplayTagsManager& TagsManager = UGameplayTagsManager::Get();

	// Local container for dynamically resolved child tags
	FGameplayTagContainer ChildTagsContainer;
	for (const FGameplayTag& Tag : PinTags)
	{
		if (Tag.IsValid())
		{
			FGameplayTagContainer TagsToAdd = TagsManager.RequestGameplayTagChildren(Tag);
			if (bDirectChildrenOnly)
			{
				for (auto& TagToAdd :TagsToAdd)
				{
					if (TagsManager.RequestGameplayTagDirectParent(TagToAdd) == Tag)
					{
						// Log the Tag and the direct parent
						UE_LOG(LogTemp, Warning, TEXT("Tag: %s, Direct Parent: %s"), *TagToAdd.GetTagName().ToString(), *TagsManager.RequestGameplayTagDirectParent(TagToAdd).GetTagName().ToString());
						ChildTagsContainer.AddTag(TagToAdd);
					}
				}
			}
			else
			{
				// Include all children (no filtering)
				ChildTagsContainer.AppendTags(TagsToAdd);
			}
		}
	}

	// Convert FGameplayTagContainer to TArray<FGameplayTag>
	TArray<FGameplayTag> ResolvedChildTags;
	ChildTagsContainer.GetGameplayTagArray(ResolvedChildTags);

	// Adjust pins based on resolved child tags
	while (ResolvedChildTags.Num() > PinNames.Num())
	{
		const FName PinName = GetUniquePinName();
		PinNames.Add(PinName);
	}

	if (PinNames.Num() > ResolvedChildTags.Num())
	{
		PinNames.SetNum(ResolvedChildTags.Num());
	}

	for (int32 Index = 0; Index < ResolvedChildTags.Num(); ++Index)
	{
		if (ResolvedChildTags[Index].IsValid())
		{
			PinNames[Index] = ResolvedChildTags[Index].GetTagName();
		}
		else
		{
			PinNames[Index] = GetUniquePinName();
		}

		CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, PinNames[Index]);
	}

	// Handle parent node
	if (bCallParentNode)
	{
		for (const FGameplayTag& ParentTag : PinTags)
		{
			// Create a pin for each parent tag
			if (ParentTag.IsValid())
			{
				FName ParentPinName = ParentTag.GetTagName();
				FCreatePinParams PinParams;
				CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, ParentPinName);
			}
		}
	}
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::RemovePin(UEdGraphPin* TargetPin)
{
	checkSlow(TargetPin);

	FName PinName = TargetPin->PinName;
	// Clean-up pin name array
	int32 Index = PinNames.IndexOfByKey(PinName);
	if (Index >= 0)
	{
		if (Index < PinTags.Num())
		{
			PinTags.RemoveAt(Index);
		}
		PinNames.RemoveAt(Index);
	}
}

FName UGameplayTagsK2Node_SwitchGameplayTagChildren::GetUniquePinName()
{
	FName NewPinName;
	int32 Index = 0;
	while (true)
	{
		NewPinName = *FString::Printf(TEXT("Case_%d"), Index++);
		if (!FindPin(NewPinName))
		{
			break;
		}
	}
	return NewPinName;
}

void UGameplayTagsK2Node_SwitchGameplayTagChildren::AddPinToSwitchNode()
{
	FName PinName = GetUniquePinName();
	PinNames.Add(PinName);

	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, PinName);
	if (PinTags.Num() < PinNames.Num())
	{
		PinTags.Add(FGameplayTag());
	}
}
